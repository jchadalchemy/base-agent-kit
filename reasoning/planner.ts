// File: core/reasoning/planner.ts

import OpenAI from 'openai';
import { AgentConfig } from '../core/agentConfig';
import { ToolPlan } from '../core/types';
import { resolveTool } from '../core/tools/toolRegistry';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export class Planner {
  async plan(input: any, config: AgentConfig): Promise<ToolPlan> {
    const inputText = typeof input === 'string' ? input : input.text;

    const prompt = `
You are an AI agent planner. Given an input message, respond with a structured JSON plan including:

- tool: (e.g., 'log', 'calendar', 'reply-draft')
- arguments: a JSON object to pass to the tool
- confidence: a number between 0 and 1
- reasoning: a 1-2 sentence explanation

Input message: "${inputText}"

Only respond with JSON. Do not include any other text.
`;

    try {
      const response = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.2
      });

      const raw = response.choices[0].message.content || '';
      const plan = JSON.parse(raw) as ToolPlan;

      const resolved = resolveTool(plan.tool);
      plan.tool = resolved.id;

      return {
        ...plan,
        reasoning: plan.reasoning || 'Generated by OpenAI planner.'
      };
    } catch (err) {
      console.error('[Planner] OpenAI fallback triggered:', err);
      return {
        tool: 'log',
        arguments: {
          message: `Fallback: Could not generate plan from input "${inputText}".`
        },
        confidence: 0.3,
        reasoning: 'Fallback planner used due to OpenAI error.'
      };
    }
  }
}
